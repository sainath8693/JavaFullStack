Absolutely! Here's a simple and clear list of JavaScript Array methods with easy examples, and whether they change the original array or return a new one.

---

## ✅ JavaScript Array Methods (Simple & Explained)

> JavaScript arrays are used to store multiple values in a single variable.
> Some methods change the array, and some return a new one.

---

 🔸 1. length

➡️ Returns number of items in array.

js
let fruits = ["apple", "banana"];
console.log(fruits.length); // 2


🔁 Changes original? ❌ No

---

 🔸 2. push()

➡️ Adds item at the end.

js
let arr = [1, 2];
arr.push(3);
console.log(arr); // [1, 2, 3]


🔁 Changes original? ✅ Yes

---

 🔸 3. pop()

➡️ Removes last item.

js
let arr = [1, 2, 3];
arr.pop();
console.log(arr); // [1, 2]


🔁 Changes original? ✅ Yes

---

 🔸 4. shift()

➡️ Removes first item.

js
let arr = [1, 2, 3];
arr.shift();
console.log(arr); // [2, 3]


🔁 Changes original? ✅ Yes

---

 🔸 5. unshift()

➡️ Adds item at the beginning.

js
let arr = [2, 3];
arr.unshift(1);
console.log(arr); // [1, 2, 3]


🔁 Changes original? ✅ Yes

---

 🔸 6. concat()

➡️ Joins two or more arrays.

js
let a = [1, 2];
let b = [3, 4];
console.log(a.concat(b)); // [1, 2, 3, 4]


🔁 Changes original? ❌ No

---

 🔸 7. join(separator)

➡️ Joins elements into a string.

js
let arr = ["a", "b", "c"];
console.log(arr.join("-")); // "a-b-c"


🔁 Changes original? ❌ No

---

 🔸 8. slice(start, end)

➡️ Cuts part of array.

js
let arr = [1, 2, 3, 4];
console.log(arr.slice(1, 3)); // [2, 3]


🔁 Changes original? ❌ No

---

 🔸 9. splice(start, deleteCount, ...items)

➡️ Removes/adds items.

js
let arr = [1, 2, 3];
arr.splice(1, 1, "a", "b");
console.log(arr); // [1, "a", "b", 3]


🔁 Changes original? ✅ Yes

---

 🔸 10. indexOf(item)

➡️ Finds the position of an item.

js
[10, 20, 30].indexOf(20); // 1


🔁 Changes original? ❌ No

---

 🔸 11. lastIndexOf(item)

➡️ Finds last position of item.

js
[1, 2, 1].lastIndexOf(1); // 2


🔁 Changes original? ❌ No

---

 🔸 12. includes(item)

➡️ Checks if item exists.

js
[1, 2, 3].includes(2); // true


🔁 Changes original? ❌ No

---

 🔸 13. forEach(callback)

➡️ Runs function on each item.

js
[1, 2, 3].forEach((x) => console.log(x));


🔁 Changes original? ❌ No (but side effects possible)

---

 🔸 14. map(callback)

➡️ Creates new array with results.

js
let nums = [1, 2, 3];
let doubled = nums.map(x => x * 2);
console.log(doubled); // [2, 4, 6]


🔁 Changes original? ❌ No

---

 🔸 15. filter(callback)

➡️ Filters values based on condition.

js
let nums = [1, 2, 3, 4];
let even = nums.filter(x => x % 2 === 0);
console.log(even); // [2, 4]


🔁 Changes original? ❌ No

---

 🔸 16. find(callback)

➡️ Finds first matching value.

js
let nums = [1, 2, 3];
let found = nums.find(x => x > 1);
console.log(found); // 2


🔁 Changes original? ❌ No

---

 🔸 17. findIndex(callback)

➡️ Finds index of first match.

js
[10, 20, 30].findIndex(x => x > 10); // 1


🔁 Changes original? ❌ No

---

 🔸 18. some(callback)

➡️ Checks if any item passes the test.

js
[1, 2, 3].some(x => x > 2); // true


🔁 Changes original? ❌ No

---

 🔸 19. every(callback)

➡️ Checks if all items pass the test.

js
[1, 2, 3].every(x => x < 5); // true


🔁 Changes original? ❌ No

---

 🔸 20. reduce(callback, initial)

➡️ Combines items to single value.

js
[1, 2, 3].reduce((sum, x) => sum + x, 0); // 6


🔁 Changes original? ❌ No

---

 🔸 21. reverse()

➡️ Reverses the array.

js
let arr = [1, 2, 3];
arr.reverse();
console.log(arr); // [3, 2, 1]


🔁 Changes original? ✅ Yes

---

 🔸 22. sort()

➡️ Sorts the array.

js
let arr = [3, 1, 2];
arr.sort();
console.log(arr); // [1, 2, 3]


🔁 Changes original? ✅ Yes

---

 🔸 23. flat(depth)

➡️ Flattens nested arrays.

js
let arr = [1, [2, [3]]];
console.log(arr.flat(2)); // [1, 2, 3]


🔁 Changes original? ❌ No

---

 🔸 24. flatMap(callback)

➡️ Maps and flattens.

js
[1, 2].flatMap(x => [x, x * 2]); // [1, 2, 2, 4]


🔁 Changes original? ❌ No

---

 🔸 25. fill(value, start, end)

➡️ Fills array with value.

js
let arr = [1, 2, 3];
arr.fill(0, 1, 3);
console.log(arr); // [1, 0, 0]


🔁 Changes original? ✅ Yes

---

 🔸 26. copyWithin(target, start, end)

➡️ Copies part of array to another place.

js
let arr = [1, 2, 3, 4];
arr.copyWithin(1, 2);
console.log(arr); // [1, 3, 4, 4]


🔁 Changes original? ✅ Yes

---

## ✅ Summary: Which Array Methods Change the Original?

| Method                                  | Changes Array? |
| --------------------------------------- | -------------- |
| push()                                | ✅ Yes          |
| pop()                                 | ✅ Yes          |
| shift()                               | ✅ Yes          |
| unshift()                             | ✅ Yes          |
| splice()                              | ✅ Yes          |
| sort()                                | ✅ Yes          |
| reverse()                             | ✅ Yes          |
| fill()                                | ✅ Yes          |
| copyWithin()                          | ✅ Yes          |
| Others (like map(), filter(), etc.) | ❌ No           |

---

Would you like this as a PDF cheat sheet, a flashcard set, or an interactive playground to try each method?
