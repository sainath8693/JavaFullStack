explain java string methods

Sure! Here’s a clear overview of commonly used Java String methods with explanations and examples:

---

 1. length()

* Returns the length of the string (number of characters).
* Example:

  java
  String s = "Hello";
  int len = s.length();  // len = 5
  

 2. charAt(int index)

* Returns the character at the specified index (0-based).
* Example:

  java
  char c = s.charAt(1);  // c = 'e'
  

 3. substring(int beginIndex)

* Returns a substring starting from beginIndex to the end.
* Example:

  java
  String sub = s.substring(2);  // sub = "llo"
  

 4. substring(int beginIndex, int endIndex)

* Returns a substring from beginIndex up to but not including endIndex.
* Example:

  java
  String sub = s.substring(1, 4);  // sub = "ell"
  

 5. equals(Object anotherString)

* Checks if two strings are exactly equal (case-sensitive).
* Example:

  java
  boolean eq = s.equals("Hello");  // true
  

 6. equalsIgnoreCase(String anotherString)

* Checks if two strings are equal, ignoring case differences.
* Example:

  java
  boolean eqIgnore = s.equalsIgnoreCase("hello");  // true
  

 7. toLowerCase()

* Converts the string to all lowercase letters.
* Example:

  java
  String lower = s.toLowerCase();  // "hello"
  

 8. toUpperCase()

* Converts the string to all uppercase letters.
* Example:

  java
  String upper = s.toUpperCase();  // "HELLO"
  

 9. trim()

* Removes leading and trailing whitespace.
* Example:

  java
  String t = "  Java  ";
  String trimmed = t.trim();  // "Java"
  

 10. replace(char oldChar, char newChar)

* Replaces all occurrences of oldChar with newChar.
* Example:

  java
  String replaced = s.replace('l', 'p');  // "Heppo"
  

 11. contains(CharSequence s)

* Checks if the string contains the specified sequence.
* Example:

  java
  boolean hasEll = s.contains("ell");  // true
  

 12. indexOf(String str)

* Returns the index of the first occurrence of str or -1 if not found.
* Example:

  java
  int index = s.indexOf("l");  // 2
  

 13. lastIndexOf(String str)

* Returns the index of the last occurrence of str.
* Example:

  java
  int lastIndex = s.lastIndexOf("l");  // 3
  

 14. split(String regex)

* Splits the string around matches of the given regex and returns an array of substrings.
* Example:

  java
  String sentence = "apple,banana,cherry";
  String[] fruits = sentence.split(",");  // ["apple", "banana", "cherry"]
  

 15. isEmpty()

* Checks if the string length is 0.
* Example:

  java
  boolean empty = "".isEmpty();  // true
  

---

If you want, I can also show examples for StringBuilder/StringBuffer methods or help you with specific string manipulations in Java! Just ask.
====

Great! Unlike String, Java arrays themselves don’t have built-in methods directly on the array object because arrays are basic language constructs, not classes with methods. But Java provides useful utility methods for arrays through the java.util.Arrays class.

Here’s a summary of key Java array-related methods you use via Arrays class and some basic array operations:

---

## 1. Arrays Class Methods (in java.util.Arrays)

 a) Arrays.toString(array)

* Returns a string representation of the array elements.
* Example:

  java
  int[] arr = {1, 2, 3};
  System.out.println(Arrays.toString(arr));  // Output: [1, 2, 3]
  

 b) Arrays.sort(array)

* Sorts the array in-place in ascending order.
* Example:

  java
  int[] arr = {3, 1, 2};
  Arrays.sort(arr);  // arr is now {1, 2, 3}
  

 c) Arrays.equals(array1, array2)

* Checks if two arrays are equal (same length and elements).
* Example:

  java
  int[] a = {1, 2};
  int[] b = {1, 2};
  boolean equal = Arrays.equals(a, b);  // true
  

 d) Arrays.copyOf(original, newLength)

* Copies the original array into a new array with specified length.
* Example:

  java
  int[] a = {1, 2, 3};
  int[] copy = Arrays.copyOf(a, 2);  // copy = {1, 2}
  

 e) Arrays.fill(array, value)

* Fills the entire array with the specified value.
* Example:

  java
  int[] arr = new int[5];
  Arrays.fill(arr, 10);  // arr = {10, 10, 10, 10, 10}
  

 f) Arrays.binarySearch(array, key)

* Searches for a key in a sorted array and returns its index or a negative value if not found.
* Example:

  java
  int[] arr = {1, 2, 3, 4, 5};
  int idx = Arrays.binarySearch(arr, 3);  // idx = 2
  

---

## 2. Basic Array Operations (not methods but useful)

 a) Length

* Get array size:

  java
  int[] arr = {1, 2, 3};
  int length = arr.length;  // length = 3 (Note: length is a property, not a method)
  

 b) Access element

* Access by index:

  java
  int x = arr[1];  // x = 2
  

 c) Modify element

* Change element at index:

  java
  arr[0] = 10;  // arr = {10, 2, 3}
  

---

If you want, I can show examples or explain how to work with multi-dimensional arrays too! Just let me know.
